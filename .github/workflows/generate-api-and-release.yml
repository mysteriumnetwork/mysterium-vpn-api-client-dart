name: Manually Trigger API Generation and Release

on:
  workflow_dispatch:

jobs:
  generate-api:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install OpenAPI Generator
        uses: remarkablemark/setup-openapi@v1

      - name: Verify OpenAPI generator version
        run: openapi-generator-cli version


      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: ~/.fvm/versions
          key: fvm-flutter-sdk-${{ runner.os }}-${{ hashFiles('.fvmrc') }}
          restore-keys: |
            fvm-flutter-sdk-${{ runner.os }}-

      - name: Setup Flutter Version Management CLI
        uses: flutter-actions/setup-fvm@v1.0 #v1.0 is tag, v1 is branch

      - name: Install Flutter SDK
        run: echo yes | fvm use

      - name: Download OpenAPI Spec
        run: curl -o openapi.yaml ${{ vars.OPENAPI_SPEC }}

      - name: Generate API
        run: |
          openapi-generator-cli generate \
            --input-spec openapi.yaml \
            --generator-name dart-dio \
            --output . \
            --skip-validate-spec \
            --minimal-update \
            --remove-operation-id-prefix \
            --global-property apiTests=false,modelTests=false,skipFormModel=false \
            --additional-properties=serializationLibrary=json_serializable,finalProperties=true,apiNameSuffix=,apiNamePrefix=,pubName=vpn_api ;\
          fvm dart run build_runner build --verbose --delete-conflicting-outputs ;\
          fvm dart format --line-length 100 . ;

      - name: Update pubspec.yaml
        uses: stikkyapp/update-pubspec-version@v2
        with:
          strategy: 'patch'
          bump-build: true
          path: './pubspec.yaml'

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com" 
          git add .
          git commit -m "Manually triggered API regeneration" || echo "No changes to commit"
          git pull --rebase
          git push

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
